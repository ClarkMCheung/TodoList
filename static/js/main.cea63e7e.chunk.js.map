{"version":3,"sources":["Header.js","ToDo.js","ToDoList.js","ToDoForm.js","App.js","reportWebVitals.js","index.js"],"names":["Header","ToDo","todo","toggleStrike","onClick","id","className","complete","task","ToDoList","toDoList","handleDelete","map","ToDoForm","addTask","useState","userInput","setUserInput","onSubmit","e","preventDefault","value","type","onChange","currentTarget","placeholder","App","setToDoList","newlist","length","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAUeA,EARA,WACZ,OACI,iCACI,+CCKIC,EARF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aAClB,OACI,qBAAKC,QAAW,kBAAMD,EAAaD,EAAKG,KAAKC,UAAWJ,EAAKK,SAAW,SAAW,GAAnF,SACKL,EAAKM,QCaFC,EAfE,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,SAAUP,EAAgC,EAAhCA,aAAcQ,EAAkB,EAAlBA,aACxC,OACI,gCACKD,EAASE,KAAI,SAAAV,GACV,OACI,cAAC,EAAD,CAAMC,aAAgBA,EAAcD,KAAMA,OAGlD,wBAAQE,QAAWO,EAAnB,uCCWIE,G,MApBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEhB,EAAoCC,mBAAS,IAA7C,mBAAQC,EAAR,KAAmBC,EAAnB,KAUA,OACI,uBAAMC,SANW,SAACC,GAClBA,EAAEC,iBACFN,EAAQE,GACRC,EAAa,KAGb,UACI,uBAAOI,MAAOL,EAAWM,KAAK,OAAOC,SAVxB,SAACJ,GAClBF,EAAaE,EAAEK,cAAcH,QASoCI,YAAY,kBACzE,wBAAQnB,UAAY,gBAApB,yB,MCmBGoB,MA7Bf,WACE,MAAkCX,mBAAS,IAA3C,mBAAQL,EAAR,KAAkBiB,EAAlB,KAaMb,EAAU,SAACE,GACf,IAAIY,EAAO,YAAOlB,GAClBkB,EAAO,sBAAOA,GAAP,CAAgB,CAAEvB,GAAIK,EAASmB,OAAS,EAAGrB,KAAMQ,EAAWT,UAAU,KAC7EoB,EAAYC,IAGf,OACE,sBAAKtB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAUH,aArBQ,SAACE,GACpB,IAAIuB,EAAUlB,EAASE,KAAI,SAACV,GAC1B,OAAOA,EAAKG,IAAMA,EAAX,2BAAoBH,GAApB,IAA0BK,UAAYL,EAAKK,WAA3C,eAA4DL,MAErEyB,EAAYC,IAiB2BlB,SAAUA,EAAUC,aAfxC,WACnB,IAAIiB,EAAUlB,EAASoB,QAAO,SAAC5B,GAC7B,OAAQA,EAAKK,YAEfoB,EAAYC,IAW6Ed,QAAWA,IACnG,cAAC,EAAD,CAAUA,QAASA,QCnBTiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cea63e7e.chunk.js","sourcesContent":["import React from 'react';\r\n \r\nconst Header = () => {\r\n   return (\r\n       <header>\r\n           <h1>To Do List</h1>\r\n       </header>\r\n   );\r\n};\r\n \r\nexport default Header;","import React from 'react';\r\n \r\nconst ToDo = ({todo, toggleStrike}) => {\r\n   return (\r\n       <div onClick = {() => toggleStrike(todo.id)} className={todo.complete ? \"strike\" : \"\"}>\r\n           {todo.task}\r\n       </div>\r\n   );\r\n};\r\n \r\nexport default ToDo;","import React from 'react';\r\nimport ToDo from './ToDo';\r\n\r\nconst ToDoList = ({toDoList, toggleStrike, handleDelete}) => {\r\n   return (\r\n       <div>\r\n           {toDoList.map(todo => {\r\n               return (\r\n                   <ToDo toggleStrike = {toggleStrike} todo={todo} />\r\n               )\r\n           })}\r\n           <button onClick = {handleDelete}>\r\n               Erase Completed Tasks\r\n           </button>\r\n       </div>\r\n   );\r\n};\r\n \r\nexport default ToDoList;","import React, { useState } from 'react';\r\n\r\nconst ToDoForm = ({ addTask }) => {\r\n\r\n    const [ userInput, setUserInput ] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setUserInput(e.currentTarget.value)\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addTask(userInput);\r\n        setUserInput(\"\");\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input value={userInput} type=\"text\" onChange={handleChange} placeholder=\"Enter task...\"/>\r\n            <button className = \"submit-button\">Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ToDoForm;","import React, { useState } from 'react';\nimport Header from \"./Header\";\nimport ToDoList from \"./ToDoList\";\nimport './App.css'; \nimport ToDoForm from './ToDoForm';\nimport 'semantic-ui-css/semantic.min.css'\n \nfunction App() {\n  const [ toDoList, setToDoList ] = useState([]);\n  const toggleStrike = (id) => {\n    let newlist = toDoList.map((todo) => {\n      return todo.id == id ? {...todo, complete : !todo.complete,} : {...todo}\n    })\n    setToDoList(newlist)\n  }\n  const handleDelete = () =>{\n    let newlist = toDoList.filter((todo) => {\n      return !todo.complete\n    })\n    setToDoList(newlist)\n  }\n  const addTask = (userInput) => {\n    let newlist = [...toDoList];\n    newlist = [...newlist, { id: toDoList.length + 1, task: userInput, complete: false }];\n    setToDoList(newlist);\n  }\n\n return (\n   <div className=\"App\">\n     <Header />\n     <ToDoList toggleStrike={toggleStrike} toDoList={toDoList} handleDelete = {handleDelete} addTask = {addTask}/>\n     <ToDoForm addTask={addTask}/>\n   </div>\n );\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}